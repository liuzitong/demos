【 头文件格式 】

0. 约定
   .h    -- 纯C 语言的头文件后缀
   .hxx  -- C++ 语言的头文件后缀
   .hpp  -- C++ 模板头文件后缀
   不带后缀名的头文件，默认作为C++ 的头文件

1. 整体格式

=================================== 代码开始 ======================================
#ifndef XXX_HXX
#define XXX_HXX

[ 包含文件部分 -- 在此处添加 #include ]

namespace 项目名称 {

[ 注释部分 -- 在此处添加针对此类的大概介绍 ]

[ 类声明区 -- 定义该类的主要声明 ]

}

#endif 
=================================== 代码结束 ======================================

2. 注释格式

2.1) 一行注释长度不超过 80 列
2.2) 单行注释以 // + 空格 + 内容
2.3) 多行注释以 /* 开始，每一行以 * 起头，最后以 */ 结束
2.5) 关于函数的注释, 如下

     /*!
      * @brief  关于函数的简介
      * @details  这里可以写多行关于函数详细见绍
      * @param  参数1 [in]   参数1的介绍，in 为输入
      * @param  参数2 [out]  参数2的介绍，out 为输出
      * @return 返回值的介绍
      * @note   注意事项
      * @warning  警告事项
      * @verbatim 
      *   这里可填写原样内容，该内容在doxygen 编译后会产生原样格式内容
      * @endverbatim
      */
      void  function ( );


【 实现文件格式 】

0. 约定
   .c   -- 纯C 的实现文件
   .cpp -- C++ 实现文件
   .cxx -- C++ 实现文件

1. 类的隔离
   1.1 ) 以下述方式作为隔离每个类的实施
   注，一行最长为 80 字符

   // /////////////////////////////////////////////////////////////////////////////
   // 类名
   // /////////////////////////////////////////////////////////////////////////////   

2. 函数的隔离
   2.1 ) 以下述方式针对每个函数进行隔离
   函数包括 类函数，静态函数
   注，一行最长为 80 字符
  
   // =============================================================================
   // 函数的简要说明
   // =============================================================================

3. 函数内部的注释
   3.1) 以下述方式针对函数内部代码段的隔离
   注，一行最长为 80 字符
   
   // -----------------------------------------------------------------------------       
   // 代码段的说明
   // -----------------------------------------------------------------------------

4. 缩进
   每次缩进以 4 个空格字符为准。






